function solution(N, stages) {
    var answer = [];
    
    let people = stages.length  
    let tmp = new Array(N).fill(0)    
    let stage = tmp.map((x,i) => {
        return i+1
    })

    let cnt = 0
    answer = stage.map((x,i)=> {
        for(let i =0; i < stages.length; i++){            
            if(x == stages[i]){
                cnt++
            }
        }
        
        return cnt/people
        cnt = 0
    })        
    return answer;
}



// 의사코드작성

// 실패율을 구하는 코드를 완성해야하네// 정의를 바로 알려주네 ㅋㅋ// 의사코드는 행위 중심으로 작성해야하니깐//주어진 입력값은 전체스테이지의 갯수 n , 멈춰잇는 스테이지의 번호 담긴 배열 stages 두개가 주어지네 

// 구해야하는것이 뭔가 ? 
// 1. 실패율이 높은 스테이지를 구하고   -- >> // 2. 그것을 실패율의내림차순으로 => sort =-->> // 3. 스테이지의 번호가 담겨있는 배열 리턴

// 실패율 == 스테이지에 도달했으나 아직클리어하지 못한 플레이어수 / 스테이지에 도달한 플레이어 수

// 행위
// 1. 주어진 입력값으로 각스테이지의 실패율을 계산하자.
// 스테이지가 담긴 배열을 만들고
// 1번스테이지부터 steages 안에서 반복문을 돌려서 실패율을 계산 ==> 생각 해보니 시간 복잡도에서 걸림 
// 스테이지 머물러 있는 사람 즉 값이 같으면 실패율 분모에 쓰이고 전체 분자를 --
// 실패율을 리턴

// 에러사항
// 인덱스번호 + 1 = 스테이지번호가 되는데 
// 실패율로 바꾼 시점에서 스테이지번호가 날라가서 리턴값 내기가 힘듬

